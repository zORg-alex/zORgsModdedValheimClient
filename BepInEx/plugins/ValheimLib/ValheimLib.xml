<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ValheimLib</name>
    </assembly>
    <members>
        <member name="T:ValheimLib.Mock`1">
            <summary>
            Helper class for creating Mock for a given vanilla Component
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:ValheimLib.ODB.ObjectDBHelper">
            <summary>
            Helper class for registering custom items, recipes, and status effects to the game ObjectDB
            </summary>
        </member>
        <member name="F:ValheimLib.ODB.ObjectDBHelper.OnBeforeCustomItemsAdded">
            <summary>
            Event that get fired after the ObjectDB get init and before its filled with custom items.
            Your code will execute once unless you resub, the event get cleared after each fire.
            </summary>
        </member>
        <member name="F:ValheimLib.ODB.ObjectDBHelper.OnAfterInit">
            <summary>
            Event that get fired after the ObjectDB get init and filled with custom items.
            Your code will execute once unless you resub, the event get cleared after each fire.
            </summary>
        </member>
        <member name="T:ValheimLib.Spawn.WeightedSpawnSystem">
            <summary>
            This class is disabled for now.
            </summary>
        </member>
        <member name="T:ValheimLib.Spawn.SpawnSystemHelper">
            <summary>
            Highly recommend to check the example available <see href="https://github.com/Valheim-Modding/ExampleMod/blob/master/ExampleMod/Mobs/Example.cs">HERE</see>
            </summary>
        </member>
        <member name="F:ValheimLib.Spawn.SpawnSystemHelper.OnAfterInit">
            <summary>
            Event that get fired after the SpawnSystem get init for the first time.
            An example on how it could be used is available  
            <see href="https://github.com/Valheim-Modding/ExampleMod/blob/master/ExampleMod/Mobs/Example.cs">HERE</see>
            </summary>
        </member>
        <member name="T:ValheimLib.Util.Events.EventsHelper">
            <summary>
            Helper class for C# Events
            </summary>
        </member>
        <member name="M:ValheimLib.Util.Events.EventsHelper.SafeInvoke(System.Action)">
            <summary>
            Try catch the delegate chain so that it doesnt break on the first failing Delegate
            </summary>
            <param name="events"></param>
        </member>
        <member name="M:ValheimLib.Util.Events.EventsHelper.SafeInvoke``1(System.Action{``0},``0)">
            <summary>
            Try catch the delegate chain so that it doesnt break on the first failing Delegate
            </summary>
            <typeparam name="TArg1"></typeparam>
            <param name="events"></param>
            <param name="arg1"></param>
        </member>
        <member name="T:ValheimLib.Language">
            <summary>
            Class for adding / replacing localization tokens
            </summary>
        </member>
        <member name="F:ValheimLib.Language.TokenFirstChar">
            <summary>
            Your token must start with this character.
            </summary>
        </member>
        <member name="F:ValheimLib.Language.DefaultLanguage">
            <summary>
            Default language of the game
            </summary>
        </member>
        <member name="F:ValheimLib.Language.TranslationsFolderName">
            <summary>
            Name of the folder that will hold the custom .json translations files
            </summary>
        </member>
        <member name="F:ValheimLib.Language.CommunityTranslationFileName">
            <summary>
            Name of the community translation files that will be the first custom languages files loaded before any others.
            </summary>
        </member>
        <member name="M:ValheimLib.Language.AddToken(System.String,System.String,System.String,System.Boolean)">
            <summary>
             Add a token and its value to the specified language (default to English)
            </summary>
            <param name="token">token / key</param>
            <param name="value">value that will be printed in the game</param>
            <param name="language"></param>
            <param name="forceReplace">replace the token if it already exists</param>
        </member>
        <member name="M:ValheimLib.Language.AddToken(System.String,System.String,System.Boolean)">
            <summary>
            Add a token and its value to the English language
            </summary>
            <param name="token">token / key</param>
            <param name="value">value that will be printed in the game</param>
            <param name="forceReplace">replace the token if it already exists</param>
        </member>
        <member name="M:ValheimLib.Language.AddPath(System.String,System.Boolean)">
            <summary>
            Add a file via absolute path
            </summary>
            <param name="path">Absolute path to file</param>
            <param name="isJson">Is the language file a json file</param>
        </member>
        <member name="M:ValheimLib.Language.Add(System.String)">
            <summary>
            Add a language file (that match the game format)
            </summary>
            <param name="fileContent">Entire file as string</param>
        </member>
        <member name="M:ValheimLib.Language.AddJson(System.String,System.String)">
            <summary>
            Add a json language file (match crowdin format)
            </summary>
            <param name="language">Language for the json file, example : "English"</param>
            <param name="fileContent">Entire file as string</param>
        </member>
        <member name="T:ValheimLib.Prefab">
            <summary>
            Helper class for everything Prefab related
            </summary>
        </member>
        <member name="F:ValheimLib.Prefab.ModdedPrefabsParentName">
            <summary>
            Name of the Root GameObject that have as childs every Modded GameObject done through InstantiateClone.
            </summary>
        </member>
        <member name="F:ValheimLib.Prefab.MockPrefix">
            <summary>
            Prefix used by the Mock System to recognize Mock gameObject that must be replaced at some point.
            </summary>
        </member>
        <member name="P:ValheimLib.Prefab.Parent">
            <summary>
            Parent is the Root GameObject that have as childs every Modded GameObject done through InstantiateClone.
            Feel free to add your modded prefabs here too
            </summary>
        </member>
        <member name="M:ValheimLib.Prefab.NetworkRegister(UnityEngine.GameObject)">
            <summary>
            Allow you to register to the ZNetScene list so that its correctly networked by the game.
            </summary>
            <param name="prefab">Prefab to register to the ZNetScene list</param>
        </member>
        <member name="M:ValheimLib.Prefab.InstantiateClone(UnityEngine.GameObject,System.String,System.Boolean)">
            <summary>
            Allow you to clone a given prefab without modifying the original. Also handle the networking and unique naming.
            </summary>
            <param name="gameObject">prefab that you want to clone</param>
            <param name="nameToSet">name for the new clone</param>
            <param name="zNetRegister">Must be true if you want to have the prefab correctly networked and handled by the ZDO system. True by default</param>
            <returns></returns>
        </member>
        <member name="M:ValheimLib.Prefab.GetRealPrefabFromMock(UnityEngine.Object,System.Type)">
            <summary>
            Will try to find the real vanilla prefab from the given mock
            </summary>
            <param name="unityObject"></param>
            <param name="mockObjectType"></param>
            <returns>the real prefab</returns>
        </member>
        <member name="M:ValheimLib.Prefab.GetRealPrefabFromMock``1(UnityEngine.Object)">
            <summary>
            Will try to find the real vanilla prefab from the given mock
            </summary>
            <typeparam name="T"></typeparam>
            <param name="unityObject"></param>
            <returns>the real prefab</returns>
        </member>
        <member name="M:ValheimLib.Prefab.FixReferences(System.Object)">
            <summary>
            Will attempt to fix every field that are mocks gameObjects / Components from the given object.
            </summary>
            <param name="objectToFix"></param>
        </member>
        <member name="M:ValheimLib.Prefab.FixReferences(UnityEngine.GameObject)">
            <summary>
            Fix the components fields of a given gameObject
            </summary>
            <param name="gameObject"></param>
        </member>
        <member name="M:ValheimLib.Prefab.CloneFields(UnityEngine.GameObject,UnityEngine.GameObject)">
            <summary>
            Will clone all fields from gameObject to objectToClone
            </summary>
            <param name="gameObject"></param>
            <param name="objectToClone"></param>
        </member>
        <member name="T:ValheimLib.Prefab.Cache">
            <summary>
            Helper class for caching gameobjects in the current scene.
            </summary>
        </member>
        <member name="M:ValheimLib.Prefab.Cache.GetPrefab(System.Type,System.String)">
            <summary>
            Get an instance of an UnityObject from the current scene with the given name
            </summary>
            <param name="type"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:ValheimLib.Prefab.Cache.GetPrefab``1(System.String)">
            <summary>
            Get an instance of an UnityObject from the current scene with the given name
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:ValheimLib.Prefab.Cache.GetPrefabs(System.Type)">
            <summary>
            Get the instances of UnityObjects from the current scene with the given type
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:SimpleJson.JsonArray">
            <summary>
            Represents the json array.
            </summary>
        </member>
        <member name="M:SimpleJson.JsonArray.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SimpleJson.JsonArray"/> class. 
            </summary>
        </member>
        <member name="M:SimpleJson.JsonArray.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:SimpleJson.JsonArray"/> class. 
            </summary>
            <param name="capacity">The capacity of the json array.</param>
        </member>
        <member name="M:SimpleJson.JsonArray.ToString">
            <summary>
            The json representation of the array.
            </summary>
            <returns>The json representation of the array.</returns>
        </member>
        <member name="T:SimpleJson.JsonObject">
            <summary>
            Represents the json object.
            </summary>
        </member>
        <member name="F:SimpleJson.JsonObject._members">
            <summary>
            The internal member dictionary.
            </summary>
        </member>
        <member name="M:SimpleJson.JsonObject.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:SimpleJson.JsonObject"/>.
            </summary>
        </member>
        <member name="M:SimpleJson.JsonObject.#ctor(System.Collections.Generic.IEqualityComparer{System.String})">
            <summary>
            Initializes a new instance of <see cref="T:SimpleJson.JsonObject"/>.
            </summary>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementation to use when comparing keys, or null to use the default <see cref="T:System.Collections.Generic.EqualityComparer`1"/> for the type of the key.</param>
        </member>
        <member name="P:SimpleJson.JsonObject.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:System.Object"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="M:SimpleJson.JsonObject.Add(System.String,System.Object)">
            <summary>
            Adds the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:SimpleJson.JsonObject.ContainsKey(System.String)">
            <summary>
            Determines whether the specified key contains key.
            </summary>
            <param name="key">The key.</param>
            <returns>
                <c>true</c> if the specified key contains key; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:SimpleJson.JsonObject.Keys">
            <summary>
            Gets the keys.
            </summary>
            <value>The keys.</value>
        </member>
        <member name="M:SimpleJson.JsonObject.Remove(System.String)">
            <summary>
            Removes the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns></returns>
        </member>
        <member name="M:SimpleJson.JsonObject.TryGetValue(System.String,System.Object@)">
            <summary>
            Tries the get value.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="P:SimpleJson.JsonObject.Values">
            <summary>
            Gets the values.
            </summary>
            <value>The values.</value>
        </member>
        <member name="P:SimpleJson.JsonObject.Item(System.String)">
            <summary>
            Gets or sets the <see cref="T:System.Object"/> with the specified key.
            </summary>
            <value></value>
        </member>
        <member name="M:SimpleJson.JsonObject.Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            Adds the specified item.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:SimpleJson.JsonObject.Clear">
            <summary>
            Clears this instance.
            </summary>
        </member>
        <member name="M:SimpleJson.JsonObject.Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            Determines whether [contains] [the specified item].
            </summary>
            <param name="item">The item.</param>
            <returns>
            	<c>true</c> if [contains] [the specified item]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:SimpleJson.JsonObject.CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)">
            <summary>
            Copies to.
            </summary>
            <param name="array">The array.</param>
            <param name="arrayIndex">Index of the array.</param>
        </member>
        <member name="P:SimpleJson.JsonObject.Count">
            <summary>
            Gets the count.
            </summary>
            <value>The count.</value>
        </member>
        <member name="P:SimpleJson.JsonObject.IsReadOnly">
            <summary>
            Gets a value indicating whether this instance is read only.
            </summary>
            <value>
            	<c>true</c> if this instance is read only; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:SimpleJson.JsonObject.Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            Removes the specified item.
            </summary>
            <param name="item">The item.</param>
            <returns></returns>
        </member>
        <member name="M:SimpleJson.JsonObject.GetEnumerator">
            <summary>
            Gets the enumerator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SimpleJson.JsonObject.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:SimpleJson.JsonObject.ToString">
            <summary>
            Returns a json <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A json <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="T:SimpleJson.SimpleJson">
            <summary>
            This class encodes and decodes JSON strings.
            Spec. details, see http://www.json.org/
            
            JSON uses Arrays and Objects. These correspond here to the datatypes JsonArray(IList&lt;object>) and JsonObject(IDictionary&lt;string,object>).
            All numbers are parsed to doubles.
            </summary>
        </member>
        <member name="M:SimpleJson.SimpleJson.DeserializeObject(System.String)">
            <summary>
            Parses the string json into a value
            </summary>
            <param name="json">A JSON string.</param>
            <returns>An IList&lt;object>, a IDictionary&lt;string,object>, a double, a string, null, true, or false</returns>
        </member>
        <member name="M:SimpleJson.SimpleJson.TryDeserializeObject(System.String,System.Object@)">
            <summary>
            Try parsing the json string into a value.
            </summary>
            <param name="json">
            A JSON string.
            </param>
            <param name="obj">
            The object.
            </param>
            <returns>
            Returns true if successfull otherwise false.
            </returns>
        </member>
        <member name="M:SimpleJson.SimpleJson.SerializeObject(System.Object,SimpleJson.IJsonSerializerStrategy)">
            <summary>
            Converts a IDictionary&lt;string,object> / IList&lt;object> object into a JSON string
            </summary>
            <param name="json">A IDictionary&lt;string,object> / IList&lt;object></param>
            <param name="jsonSerializerStrategy">Serializer strategy to use</param>
            <returns>A JSON encoded string, or null if object 'json' is not serializable</returns>
        </member>
        <member name="M:SimpleJson.SimpleJson.IsNumeric(System.Object)">
            <summary>
            Determines if a given object is numeric in any way
            (can be integer, double, null, etc).
            </summary>
        </member>
    </members>
</doc>
